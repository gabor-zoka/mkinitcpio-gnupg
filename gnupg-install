#!/bin/bash

# This file is part of mkinitcpio-gnupg.
#
# mkinitcpio-gnupg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# mkinitcpio-gnupg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with mkinitcpio-gnupg.  If not, see <https://www.gnu.org/licenses/>.

build() {
    local mod

    add_binary "gpg"
    add_binary "gpg-agent"
    add_binary "pinentry-tty"
    add_binary "pcscd"
    add_binary "/usr/lib/gnupg/scdaemon"

    add_runscript
}

help() {
    cat <<HELPEOF
This hook allows to use gnupg to decrypt multiple files.

Options (fetched from the kernel command line):
* gpg_decrypt=dev:fstype:path-to-encrypted-key:outfile
  
  Example: gpg_decrypt=LABEL=boot1:ext3:random.gpg:/crypto_keyfile.bin

  encrypt hook from cryptsetup package by default assumes that the
  unencrypted key is in /crypto_keyfile.bin, hence setting it saves
  a parameter.

  Naturally encrypt hook must come after this module.

* gpg_import=dev:fstype:path-to-pubkey

  Example: gpg_import=LABEL=boot1:ext3:public-all.asc

* Alternatively you can specify a file on ramdisk via rootfs

  Example: gpg_decrypt=rootfs:/random.gpg:/crypto_keyfile.bin
           gpg_import=rootfs:/public-all.asc

* Multiple files can be provided using ';' as a separator
HELPEOF
}

# vim: set ft=sh ts=4 sw=4 et:
